# Dockerfile for Production - Chat App
# Multi-stage build for optimized production image

# Stage 1: Build dependencies and compile assets
FROM ruby:3.4.7-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    build-base \
    postgresql-dev \
    nodejs \
    yarn \
    git \
    tzdata

# Set working directory
WORKDIR /app

# Copy Gemfile and install gems
COPY Gemfile Gemfile.lock ./
RUN bundle config set --local deployment 'true' && \
    bundle config set --local without 'development test' && \
    bundle install --jobs 4 --retry 3

# Copy package.json and install npm dependencies
COPY package.json yarn.lock ./
RUN yarn install --frozen-lockfile --production=false

# Copy the rest of the application
COPY . .

# Precompile assets
ENV RAILS_ENV=production
ENV NODE_ENV=production
ENV SECRET_KEY_BASE=dummy_key_for_asset_compilation

RUN bundle exec rails assets:precompile

# Stage 2: Production runtime image
FROM ruby:3.4.7-alpine

# Install runtime dependencies only
RUN apk add --no-cache \
    postgresql-client \
    nodejs \
    tzdata \
    curl

# Create app user
RUN addgroup -g 1000 -S app && \
    adduser -u 1000 -S app -G app

# Set working directory
WORKDIR /app

# Copy installed gems from builder
COPY --from=builder /usr/local/bundle /usr/local/bundle

# Copy application code and compiled assets
COPY --from=builder --chown=app:app /app /app

# Set user
USER app

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3000/up || exit 1

# Set environment
ENV RAILS_ENV=production
ENV RAILS_LOG_TO_STDOUT=true
ENV RAILS_SERVE_STATIC_FILES=true

# Start server
CMD ["bundle", "exec", "puma", "-C", "config/puma.rb"]
