name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: andres-holivin/chat-app

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          port: ${{ secrets.SERVER_PORT }}
          password: ${{ secrets.SERVER_SSH_PASSWORD }}
          script: |
            set -e

            echo "🚀 Starting deployment..."

            # Navigate to deployment directory
            cd ${{ secrets.DEPLOY_PATH }}

            # Log in to GitHub Container Registry
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            # Pull latest image
            echo "📦 Pulling latest Docker image..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

            # Create/update .env file from GitHub secrets
            echo "📝 Creating .env file from environment variables..."
            cat > .env << ENVEOF
            # Rails Configuration
            RAILS_ENV=${{ vars.RAILS_ENV }}
            RAILS_LOG_TO_STDOUT=true
            RAILS_SERVE_STATIC_FILES=true
            
            # Database Configuration
            DATABASE_URL=${{ vars.DATABASE_URL }}
            
            # Secret Key Base
            SECRET_KEY_BASE=${{ vars.SECRET_KEY_BASE }}

            # Redis Configuration (if using Redis for Action Cable)
            # REDIS_URL=${{ vars.REDIS_URL }}
            ENVEOF
            echo "✅ .env file created/updated from secrets"

            # Create/update docker-compose.yml to use the GitHub Container Registry image
            cat > docker-compose.yml << 'EOF'
            services:
              web:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
                ports:
                  - "3000:3000"
                env_file:
                  - .env
                environment:
                  - RAILS_ENV=production
                restart: unless-stopped
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000/up"]
                  interval: 30s
                  timeout: 3s
                  retries: 3
                  start_period: 40s
            EOF

            # Stop and remove old container
            echo "🛑 Stopping old container..."
            docker compose down || true

            # Start new container
            echo "▶️ Starting new container..."
            docker compose up -d

            # Wait for container to be healthy
            echo "⏳ Waiting for application to start..."
            sleep 15

            # Check if container is running
            if docker ps | grep -q chat-app; then
              echo "✅ Container is running!"
              
              # Run database migrations
              echo "🔄 Running database migrations..."
              docker compose exec -T web bundle exec rails db:migrate || true
              
              # Load solid_cable schema
              echo "🔄 Loading solid_cable schema..."
              docker compose exec -T web bundle exec rails db:schema:load:cable || true
              
              # Clean up old images
              echo "🧹 Cleaning up old Docker images..."
              docker image prune -af --filter "until=72h" || true
              
              echo "✅ Deployment successful!"
            else
              echo "❌ Deployment failed - container not running"
              docker compose logs
              exit 1
            fi

      - name: Verify Deployment
        run: |
          echo "🔍 Verifying deployment..."
          sleep 5

          # Check if the application is accessible
          for i in {1..10}; do
            if curl -f -s -o /dev/null http://${{ secrets.SERVER_HOST }}:3000/up; then
              echo "✅ Application is healthy and accessible!"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 5 seconds..."
            sleep 5
          done

          echo "⚠️ Health check endpoint not accessible from outside"
          echo "Container may still be running. Please verify manually."

      - name: Notify on Success
        if: success()
        run: |
          echo "::notice::🎉 Deployment completed successfully!"
          echo "::notice::Application URL: http://${{ secrets.SERVER_HOST }}:3000"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "::error::❌ Deployment failed! Check the logs above for details."
